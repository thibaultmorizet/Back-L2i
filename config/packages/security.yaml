security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    api:
      pattern: ^/ws/
      stateless: true
      provider: app_user_provider
      jwt: ~
    main:
      json_login:
        check_path: /authentication_token
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/ws/docs, roles: PUBLIC_ACCESS } # Pour autoriser l'acc`es `a Swagger UI
    - { path: ^/ws/products, roles: PUBLIC_ACCESS }
    - { path: ^/ws/books, roles: PUBLIC_ACCESS }
    - { path: ^/ws/videos, roles: PUBLIC_ACCESS }
    - { path: ^/ws/brands, roles: PUBLIC_ACCESS }
    - { path: ^/ws/formats, roles: PUBLIC_ACCESS }
    - { path: ^/ws/categories, roles: PUBLIC_ACCESS }
    - { path: ^/ws/taxes, roles: PUBLIC_ACCESS }
    - { path: ^/ws/editors, roles: PUBLIC_ACCESS }
    - { path: ^/ws/images, roles: PUBLIC_ACCESS }
    - { path: ^/ws/comments, roles: PUBLIC_ACCESS }
    - { path: ^/ws/authors, roles: PUBLIC_ACCESS }
    - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
    - { path: ^/generate_pdf, roles: PUBLIC_ACCESS }
    - { path: ^/mail, roles: PUBLIC_ACCESS }
    - { path: ^/add_image, roles: PUBLIC_ACCESS }
    - { path: ^/delete_image, roles: PUBLIC_ACCESS }
    - { path: ^/ws/users, roles: PUBLIC_ACCESS }
    - { path: ^/ws/addresses, roles: PUBLIC_ACCESS }
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
